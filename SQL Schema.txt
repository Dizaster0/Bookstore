CREATE TABLE Book (
bid VARCHAR(20) NOT NULL,
title VARCHAR(60) NOT NULL,
price REAL NOT NULL,
author VARCHAR(60),
category VARCHAR(60) NOT NULL CHECK(category='Science' or category='Fiction' or category='Engineering'),
PRIMARY KEY(bid)
)

CREATE TABLE Address (
addressid INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
userid INT,
street VARCHAR(100) NOT NULL CHECK(street NOT LIKE '%<script>%'),
province VARCHAR(20) NOT NULL,
country VARCHAR(20) NOT NULL,
zip VARCHAR(20) NOT NULL,
phone VARCHAR(20),
PRIMARY KEY(addressid),
FOREIGN KEY (userid) REFERENCES USERS(userId) ON DELETE CASCADE
)


CREATE TABLE Billing (
cardtype VARCHAR(30) NOT NULL,
expdate VARCHAR(5) NOT NULL,
cardnumber VARCHAR(30) NOT NULL CHECK(cardnumber NOT LIKE '%<script>%'),
cardholder VARCHAR(100) NOT NULL CHECK(cardholder NOT LIKE '%<script>%'),
userid INT REFERENCES USERS(userid),
cardid INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
PRIMARY KEY(cardid)
)

CREATE TABLE PO (
id INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
status VARCHAR(20) NOT NULL CHECK(status='ORDERED' or status='PROCESSED' or status='DENIED'),
addressid INT NOT NULL REFERENCES ADDRESS(addressid),
cardid INT NOT NULL REFERENCES BILLING(cardid),
orderDate VARCHAR(10) NOT NULL,
PRIMARY KEY(id)
)

CREATE TABLE POItem (
id INT  NOT NULL CHECK(id > 0),
bid VARCHAR(20) NOT NULL,
price INT NOT NULL CHECK(price > 0),
PRIMARY KEY(id,bid),
FOREIGN KEY(id) REFERENCES PO(id) ON DELETE CASCADE,
FOREIGN KEY(bid) REFERENCES Book(bid) ON DELETE CASCADE
)

CREATE TABLE USERS (
userId INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
username VARCHAR(45) NOT NULL UNIQUE CHECK(username NOT LIKE '%<script>%'),
password VARCHAR(45) NOT NULL CHECK(password NOT LIKE '%<script>%'),
firstname VARCHAR(45) NOT NULL CHECK(firstname  NOT LIKE  '%<script>%'),
lastname VARCHAR(45) NOT NULL CHECK(lastname NOT LIKE '%<script>%'),
email VARCHAR(45) default NULL,
role VARCHAR(20) NOT NULL,
PRIMARY KEY (userId)
)

CREATE TABLE REVIEWS (
bid VARCHAR(20) NOT NULL REFERENCES BOOK(bid),
rating DOUBLE NOT NULL,
reviewer VARCHAR(50),
review VARCHAR(255)
)

CREATE TRIGGER XSS 
AFTER INSERT ON REVIEWS
FOR EACH ROW
	UPDATE  REVIEWS  SET review = REPLACE(Review, '<', '&lt');

CREATE TRIGGER XSS1
AFTER INSERT ON REVIEWS
FOR EACH ROW
	UPDATE  REVIEWS  SET reviewer = REPLACE(reviewer, '<', '&lt');

